/*

Model: One sink with a non trivial predecessor.
(We need infinite runs in both time directions, so both states have a loop)

Test future/past time flows.

*/

:states t,f
:edges t -> t, f -> t, f -> f
:atom "x:in+" = [t]
:atom "x:in-" = [f]

//EX

:assert "EX x:in+" == [f,t]
:assert "pEX x:in+" == [t]
:assert "EwX x:in+" == [f,t]
:assert "pEwX x:in+" == [t]

//AX

:assert "AX x:in+" == [t]
:assert "pAX x:in+" == []
:assert "AwX x:in+" == [t]
:assert "pAwX x:in+" == []

//EF

:assert "EF x:in+" == [f,t]
:assert "pEF x:in+" == [t]
:assert "EwF x:in+" == [f,t]
:assert "pEwF x:in+" == [t]

//AF

:assert "AF x:in+" == [t]
:assert "pAF x:in+" == [t]
:assert "AwF x:in+" == [t]
:assert "pAwF x:in+" == [t]

//EU

:assert "x:in+ EU x:in+" == [t]
:assert "x:in+ pEU x:in+" == [t]
:assert "x:in- EU x:in+" == [t,f]
:assert "x:in- pEU x:in+" == [t]

//AU

:assert "x:in+ AU x:in+" == [t]
:assert "x:in+ pAU x:in+" == [t]
:assert "x:in- AU x:in+" == [t]
:assert "x:in- pAU x:in+" == [t]

//EG

:assert "EG x:in+" == [t]
:assert "pEG x:in+" == [t]

//AG

:assert "AG x:in+" == [t]
:assert "pAG x:in+" == []